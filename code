#import libraries 
from datetime import datetime
import numpy as np
import pandas as pd
import matplotlib.pylab as plt
%matplotlib inline
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.stattools import acf, pacf
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.ar_model import AutoReg
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from matplotlib.pylab import rcParams
from pmdarima.arima import auto_arima
rcParams['figure.figsize']=10,6

#load the data
df= pd.read_csv('Soil_humidity.csv',parse_dates=['Minute'],infer_datetime_format=True)
#index the dataet using months
indf=df.set_index(['Minute'])

plt.xlabel('Minute')
plt.ylabel('Soil Humidity')
plt.plot(df.Humidity)

indf.describe()

train=indf.Humidity[:int (len(indf.Humidity)*0.75)] #split dataset into 75/25%
test=indf.Humidity[int(len(indf.Humidity)*0.75):]

model_autoARIMA=auto_arima(train, start_p=1,start_q=1,max_p=4,max_q=4,test='adf',m=1, d=1, seasonal=False, trace=True, D=0, error_action='ignore',suppress_warning=True,stepwise=True)
print(model_autoARIMA.summary())
model_autoARIMA.plot_diagnostics(figsize=(15,8))
plt.show()

def forecasts(model,actual):
    fc, conf=model.predict(n_periods=len(actual),return_conf_int=True)
    fc_series=pd.Series(fc, index=test.index)
    lower_bound=pd.Series(conf[:,0],index=actual.index)
    upper_bound=pd.Series(conf[:,1],index=actual.index)
    #plot
    plt.plot(indf.Humidity)
    plt.plot(actual, color='orange', label='actual')
    plt.plot(fc_series,color='green', label='Forecasts')
    plt.fill_between(lower_bound.index, lower_bound, upper_bound, color='k',alpha=.15)
    plt.legend(loc='upper left')
    plt.xlabel('Date')
    plt.ylabel('Humidity')
    plt.title("Forecast of Humidity")

    plt.show()


forecasts(model_autoARIMA,test)

def measure_performance(forecast,actual):
    #mean error
    ME= np.mean(forecast-actual)
    #Mean Absolute Percentage error
    MAPE=np.mean(np.abs(forecast-test)/np.abs(actual))
    #mean percentage error
    MPE=np.mean((forecast-actual)/actual)
    # Lag 1 Autocorrelationn Error
    acf_error=acf(forecast-actual)[1]
    #mean squared error
    MSE=mean_squared_error(actual,forecast)
    #Correlation
    corr=np.corrcoef(forecast, actual)[0,1]
    df_performance=pd.Series([ME,MAPE,MPE,corr,acf_error,MSE],index=['Mean Error','Mean Absolute Percentage Error','Mean Percentage Error','Correlation','Lag 1 Autocorrelationn Error','Mean Squared Error'])
    return df_performance
    
  fc, conf=model_autoARIMA.predict(n_periods=len(test),return_conf_int=True)
  forecastArima_series=pd.Series(fc, index=test.index)
  measure_performance(forecastArima_series,test)
  
  #lets build SARIMA model
model_Sarima=auto_arima(train, start_p=1,start_q=1,max_p=4,max_q=4,test='adf',m=12, d=None, seasonal=True, trace=True,start_P=1, D=1, error_action='ignore',suppress_warning=True,stepwise=True)
forecast_sm,conf=model_Sarima.predict(n_periods=len(test),return_conf_int=True)
sm_forecast=pd.Series(forecast_sm, index=test.index)

forecasts(model_Sarima,test)

#model accuracy
measure_performance(sm_forecast,test)

    
